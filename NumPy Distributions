{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# For six distributions: \n",
    "\n",
    "1) Generate a random variable with 100 datapoints using the code distributionvar = np.random.distributionname([arguments], 100), replacing distributionvar with an appropriate variable name and distributionname with the name of the distribution you’ve chosen, and filling in the empty space in the parentheses with your chosen values for the appropriate parameters. If you feel uncertain about how to do this, go back to the “Other Distributions” assignment for examples of code to use as a starting point.\n",
    "\n",
    "2) Graph the variable using a histogram.\n",
    "\n",
    "3) Compute the mean and standard deviation and plot them as vertical lines on the histogram. (Hint: the “When Does It Break?” assignment you just completed can help you here.)\n",
    "\n",
    "4) Evaluate whether the descriptive statistics provided useful information about the variable. Can you identify any common characteristics of the distributions that could be usefully described using the mean and/or standard deviation, versus the ones that could not?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1) Logistic Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10ca094a8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean = -0.007041799128520212\n",
      "Standard Deviation = 2.0121576967333836\n",
      "\n",
      "With the exception of the outlier, the mean and standard deviation still provide useful information about the distribution.\n"
     ]
    }
   ],
   "source": [
    "#Distribution 1\n",
    "#Generate a logistic distribution with size = 100.\n",
    "logistic= np.random.logistic(loc=0.0, scale=1.0, size=100)\n",
    "\n",
    "#Plot a histogram.\n",
    "plt.hist(logistic)\n",
    "\n",
    "#Add a vertical line at the mean.\n",
    "plt.axvline(logistic.mean(), color='red', linestyle='solid', linewidth=2)\n",
    "\n",
    "#Add a vertical line at one standard deviation above the mean.\n",
    "plt.axvline(logistic.mean() + logistic.std(), color='red', linestyle='dashed', linewidth=2)\n",
    "\n",
    "#Add a vertical line at one standard deviation below the mean.\n",
    "plt.axvline(logistic.mean()- logistic.std(), color='red', linestyle='dashed', linewidth=2) \n",
    "\n",
    "#Print the histogram\n",
    "plt.show()\n",
    "\n",
    "mean = np.mean(logistic)\n",
    "print(\"Mean = {}\".format(mean))\n",
    "standard_deviation = np.std(logistic, ddof = 1)\n",
    "print(\"Standard Deviation = {}\".format(standard_deviation))\n",
    "\n",
    "print(\"\\nWith the exception of the outlier, the mean and standard deviation still provide useful information about the distribution.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2) Poisson Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10df08978>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean = 1.02\n",
      "Standard Deviation = 0.9637888196533974\n",
      "\n",
      "The data does not follow a normal distribution, so the mean and standard deviation will not provide useful information about the distribution.\n"
     ]
    }
   ],
   "source": [
    "#Distribution 2\n",
    "#Generate a poisson distribution with size = 100.\n",
    "poisson= np.random.poisson(lam=1.0, size=100)\n",
    "\n",
    "#Plot a histogram.\n",
    "plt.hist(poisson)\n",
    "\n",
    "#Add a vertical line at the mean.\n",
    "plt.axvline(poisson.mean(), color='red', linestyle='solid', linewidth=2)\n",
    "\n",
    "#Add a vertical line at one standard deviation above the mean.\n",
    "plt.axvline(poisson.mean() + poisson.std(), color='red', linestyle='dashed', linewidth=2)\n",
    "\n",
    "#Add a vertical line at one standard deviation below the mean.\n",
    "plt.axvline(poisson.mean()- poisson.std(), color='red', linestyle='dashed', linewidth=2) \n",
    "\n",
    "#Print the histogram\n",
    "plt.show()\n",
    "\n",
    "mean = np.mean(poisson)\n",
    "print(\"Mean = {}\".format(mean))\n",
    "standard_deviation = np.std(poisson, ddof = 1)\n",
    "print(\"Standard Deviation = {}\".format(standard_deviation))\n",
    "\n",
    "print(\"\\nThe data does not follow a normal distribution, so the mean and standard deviation will not provide useful information about the distribution.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3)  Exponential Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10deee828>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean = 1.197291980364471\n",
      "Standard Deviation = 1.2034729640433324\n",
      "\n",
      "The data does not follow a normal distribution, so the mean and standard deviation will not provide useful information about the distribution.\n"
     ]
    }
   ],
   "source": [
    "#Distribution 3\n",
    "#Generate an exponential distribution with size = 100.\n",
    "exponential = np.random.exponential(scale=1.0, size=100)\n",
    "\n",
    "#Plot a histogram.\n",
    "plt.hist(exponential)\n",
    "\n",
    "#Add a vertical line at the mean.\n",
    "plt.axvline(exponential.mean(), color='red', linestyle='solid', linewidth=2)\n",
    "\n",
    "#Add a vertical line at one standard deviation above the mean.\n",
    "plt.axvline(exponential.mean() + exponential.std(), color='red', linestyle='dashed', linewidth=2)\n",
    "\n",
    "#Add a vertical line at one standard deviation below the mean.\n",
    "plt.axvline(exponential.mean()- exponential.std(), color='red', linestyle='dashed', linewidth=2) \n",
    "\n",
    "#Print the histogram\n",
    "plt.show()\n",
    "\n",
    "mean = np.mean(exponential)\n",
    "print(\"Mean = {}\".format(mean))\n",
    "standard_deviation = np.std(exponential, ddof = 1)\n",
    "print(\"Standard Deviation = {}\".format(standard_deviation))\n",
    "\n",
    "print(\"\\nThe data does not follow a normal distribution, so the mean and standard deviation will not provide useful information about the distribution.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4) Chisquare Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10b4065f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean = 98.63187126207238\n",
      "Standard Deviation = 11.33203092755467\n",
      "\n",
      "The data does not follow a normal distribution, so the mean and standard deviation will not provide useful information about the distribution.\n"
     ]
    }
   ],
   "source": [
    "#Distribution 4\n",
    "#Generate a chisquare distribution with size = 100.\n",
    "chisquare = np.random.chisquare(df=99, size=100)\n",
    "\n",
    "#Plot a histogram.\n",
    "plt.hist(chisquare)\n",
    "\n",
    "#Add a vertical line at the mean.\n",
    "plt.axvline(chisquare.mean(), color='red', linestyle='solid', linewidth=2)\n",
    "\n",
    "#Add a vertical line at one standard deviation above the mean.\n",
    "plt.axvline(chisquare.mean() + chisquare.std(), color='red', linestyle='dashed', linewidth=2)\n",
    "\n",
    "#Add a vertical line at one standard deviation below the mean.\n",
    "plt.axvline(chisquare.mean()- chisquare.std(), color='red', linestyle='dashed', linewidth=2) \n",
    "\n",
    "#Print the histogram\n",
    "plt.show()\n",
    "\n",
    "mean = np.mean(chisquare)\n",
    "print(\"Mean = {}\".format(mean))\n",
    "standard_deviation = np.std(chisquare, ddof =1)\n",
    "print(\"Standard Deviation = {}\".format(standard_deviation))\n",
    "\n",
    "print(\"\\nThe data does not follow a normal distribution, so the mean and standard deviation will not provide useful information about the distribution.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# # 5) Normal Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10e17ae80>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean = 0.0267761217640656\n",
      "Standard Deviation = 1.016939110870597\n",
      "\n",
      "The data follows a normal distribution, so the mean and standard deviation will provide useful information about the distribution.\n"
     ]
    }
   ],
   "source": [
    "#Distribution 5\n",
    "#Generate a normal distribution with size = 100.\n",
    "normal = np.random.normal(loc=0.0, scale=1.0, size=100)\n",
    "\n",
    "#Plot a histogram.\n",
    "plt.hist(normal)\n",
    "\n",
    "#Add a vertical line at the mean.\n",
    "plt.axvline(normal.mean(), color='red', linestyle='solid', linewidth=2)\n",
    "\n",
    "#Add a vertical line at one standard deviation above the mean.\n",
    "plt.axvline(normal.mean() + normal.std(), color='red', linestyle='dashed', linewidth=2)\n",
    "\n",
    "#Add a vertical line at one standard deviation below the mean.\n",
    "plt.axvline(normal.mean()- normal.std(), color='red', linestyle='dashed', linewidth=2) \n",
    "\n",
    "#Print the histogram\n",
    "plt.show()\n",
    "\n",
    "mean = np.mean(normal)\n",
    "print(\"Mean = {}\".format(mean))\n",
    "standard_deviation = np.std(normal, ddof =1)\n",
    "print(\"Standard Deviation = {}\".format(standard_deviation))\n",
    "\n",
    "print(\"\\nThe data follows a normal distribution, so the mean and standard deviation will provide useful information about the distribution.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# # 6) Standard Normal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10ded4358>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean = -0.031406867646316255\n",
      "Standard Deviation = 0.955231005525097\n",
      "\n",
      "The data follows a normal distribution, so the mean and standard deviation will provide useful information about the distribution.\n"
     ]
    }
   ],
   "source": [
    "#Distribution 6\n",
    "#Generate a standard normal distribution with size = 100.\n",
    "standard_normal = np.random.standard_normal(size=100)\n",
    "\n",
    "#Plot a histogram.\n",
    "plt.hist(standard_normal)\n",
    "\n",
    "#Add a vertical line at the mean.\n",
    "plt.axvline(standard_normal.mean(), color='red', linestyle='solid', linewidth=2)\n",
    "\n",
    "#Add a vertical line at one standard deviation above the mean.\n",
    "plt.axvline(standard_normal.mean() + standard_normal.std(), color='red', linestyle='dashed', linewidth=2)\n",
    "\n",
    "#Add a vertical line at one standard deviation below the mean.\n",
    "plt.axvline(standard_normal.mean()- standard_normal.std(), color='red', linestyle='dashed', linewidth=2) \n",
    "\n",
    "#Print the histogram\n",
    "plt.show()\n",
    "\n",
    "mean = np.mean(standard_normal)\n",
    "print(\"Mean = {}\".format(mean))\n",
    "standard_deviation = np.std(standard_normal, ddof =1)\n",
    "print(\"Standard Deviation = {}\".format(standard_deviation))\n",
    "\n",
    "print(\"\\nThe data follows a normal distribution, so the mean and standard deviation will provide useful information about the distribution.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The common characteristics of the distributions that could be usefully described using the mean and/or standard deviation, versus the ones that could not, include the distribution being normal instead of skewed. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Additionally:\n",
    "\n",
    "1) Generate two normally-distributed variables, one with a mean of 5 and standard deviation of 0.5, and the other with a mean of 10 and standard deviation of 1.\n",
    "\n",
    "2) Add them together to create a third variable.\n",
    "\n",
    "3) Graph the third variable using a histogram.\n",
    "\n",
    "4) Compute the mean and standard deviation and plot them as vertical lines on the histogram.\n",
    "\n",
    "5) Evaluate the descriptive statistics against the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10e5bacc0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean = 15.08682050427222\n",
      "Standard Deviation = 0.9953060735501978\n",
      "\n",
      "There seems to be some skew with the data, so the mean and standard deviation will not provide useful information about the distribution.\n"
     ]
    }
   ],
   "source": [
    "variable1 = np.random.normal(5, .5, 100)\n",
    "variable2 = np.random.normal(10, 1, 100)\n",
    "variable3 = variable1 + variable2\n",
    "\n",
    "plt.hist(variable3)\n",
    "\n",
    "plt.axvline(variable3.mean(), color='red', linestyle='solid', linewidth=2)\n",
    "plt.axvline(variable3.mean() + variable3.std(), color='red', linestyle='dashed', linewidth=2)\n",
    "plt.axvline(variable3.mean()- variable3.std(), color='red', linestyle='dashed', linewidth=2) \n",
    "\n",
    "plt.show()\n",
    "\n",
    "mean = np.mean(variable3)\n",
    "print(\"Mean = {}\".format(mean))\n",
    "standard_deviation = np.std(variable3, ddof =1)\n",
    "print(\"Standard Deviation = {}\".format(standard_deviation))\n",
    "\n",
    "print(\"\\nThere seems to be some skew with the data, so the mean and standard deviation will not provide useful information about the distribution.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
